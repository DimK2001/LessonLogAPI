@page "/CreateTeacher"
@using LessonLog.Domain;
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@inject IJSRuntime js

<h3>Create</h3>


@inject NavigationManager NavigationManager
@inject HttpClient httpClient



<div class="row">
    <EditForm Model="@teacher" OnValidSubmit="@InsertAccount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            Name: <InputText id="balance" @bind-Value="teacher.Name" class="form-control" />
        </div>
        <div class="form-group">
            Post: <InputText id="name" @bind-Value="teacher.Post" class="form-control" />
        </div>
        <div class="form-group">
            AcademicPosition: <InputText id="name" @bind-Value="teacher.AcademicPosition" class="form-control" />
        </div>
        <div class="form-group">
            AcademicTitle: <InputText id="name" @bind-Value="teacher.AcademicTitle" class="form-control" />
        </div>
        <div class="form-group">
            LessonId: <InputText id="name" @bind-Value="LessonId" class="form-control" />
        </div>

        <br />
        <button type="submit" class="btn btn-success">Done</button>
    </EditForm>
</div>

<br />
<br />

@if (responseMessage != null)
{
    <p>@responseMessage</p>
}


@* <a href="/Accounts">Back to List</a> *@
@* *@
@* *@
@code {
    public string LessonId { get; set; }
    private string responseMessage { get; set; }
    private Teacher teacher = new Teacher();

    private async Task InsertAccount()
    {
        teacher.LessonId = Guid.Parse(LessonId);
        var rs = await httpClient.PostAsJsonAsync($"https://localhost:5001/api/Teachers", teacher);
        responseMessage = await rs.Content.ReadAsStringAsync();
    }

}
