@page "/EditLesson/{stId:guid}"
@using LessonLog.Domain;
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@inject IJSRuntime js

<h3>EditLesson</h3>


@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@stId

<div class="row">
    <EditForm Model="@lesson" OnValidSubmit="@InsertAccount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            Number: <InputNumber id="balance" @bind-Value="lesson.Number" class="form-control" />
        </div>
        <div class="form-group">
            Type: <InputText id="name" @bind-Value="lesson.Type" class="form-control" />
        </div>
        <div class="form-group">
            Date: <InputDate id="name" @bind-Value="lesson.Date" class="form-control" />
        </div>
        <div class="form-group">
            Start: <InputDate id="name" @bind-Value="lesson.StartTime" class="form-control" />
        </div>
        <div class="form-group">
            End: <InputDate id="name" @bind-Value="lesson.EndTime" class="form-control" />
        </div>
        <div class="form-group">
            Theme: <InputText id="name" @bind-Value="lesson.Theme" class="form-control" />
        </div>
        <div class="form-group">
            State: <InputNumber id="name" @bind-Value="lesson.State" class="form-control" />
        </div>

        <br />
        <button type="submit" class="btn btn-success">Edit</button>
    </EditForm>
</div>

<br />
<br />

@if (responseMessage != null)
{
    <p>@responseMessage</p>
}


@* <a href="/Accounts">Back to List</a> *@
@* *@
@* *@
@code {

    [Parameter]
    public Guid stId { get; set; }

    private string responseMessage { get; set; }
    private Lesson lesson = new Lesson();

    protected override async Task OnInitializedAsync()
    {
        var _lesson = await httpClient.GetFromJsonAsync<Lesson>
            ($"https://localhost:5001/api/Lessons/{stId}");
        lesson.Id = _lesson.Id;
        lesson.Number = _lesson.Number;
        lesson.Type = _lesson.Type;
        lesson.Date = _lesson.Date;
        lesson.StartTime = _lesson.StartTime;
        lesson.EndTime = _lesson.EndTime;
        lesson.Theme = _lesson.Theme;
        lesson.State = _lesson.State;
    }
    private async Task InsertAccount()
    {
        var rs = await httpClient.PutAsJsonAsync($"https://localhost:5001/api/Lessons/{stId}", lesson);
        if (rs.IsSuccessStatusCode)
        {
            responseMessage = await rs.Content.ReadAsStringAsync();
        }
        else
        {
            responseMessage = await rs.Content.ReadAsStringAsync();
        }
    }

}
